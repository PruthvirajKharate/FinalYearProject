/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_DENOM"
      | "DEFAULT_ADMIN_ROLE"
      | "LIQUIDATOR_ROLE"
      | "addReserve"
      | "borrow"
      | "collateralETH"
      | "collateralRatioBps"
      | "deposit"
      | "depositCollateral"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "lenderBalances"
      | "liquidate"
      | "loans"
      | "renounceRole"
      | "repay"
      | "reserves"
      | "revokeRole"
      | "setCollateralRatio"
      | "supportsInterface"
      | "tokenToSymbol"
      | "updateReserve"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrowed"
      | "CollateralDeposited"
      | "CollateralRatioUpdated"
      | "Deposited"
      | "Liquidated"
      | "Repaid"
      | "ReserveAdded"
      | "ReserveUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BPS_DENOM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatioBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderBalances",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "repay", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserves", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToSymbol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReserve",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BPS_DENOM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatioBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lenderBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    symbol: BytesLike,
    amount: BigNumberish,
    collateral: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    symbol: string,
    amount: bigint,
    collateral: bigint
  ];
  export interface OutputObject {
    borrower: string;
    symbol: string;
    amount: bigint;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRatioUpdatedEvent {
  export type InputTuple = [newRatioBps: BigNumberish];
  export type OutputTuple = [newRatioBps: bigint];
  export interface OutputObject {
    newRatioBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    lender: AddressLike,
    symbol: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lender: string, symbol: string, amount: bigint];
  export interface OutputObject {
    lender: string;
    symbol: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    liquidator: AddressLike,
    seizedCollateral: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    liquidator: string,
    seizedCollateral: bigint
  ];
  export interface OutputObject {
    borrower: string;
    liquidator: string;
    seizedCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    borrower: AddressLike,
    symbol: BytesLike,
    repaid: BigNumberish,
    interest: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    symbol: string,
    repaid: bigint,
    interest: bigint
  ];
  export interface OutputObject {
    borrower: string;
    symbol: string;
    repaid: bigint;
    interest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveAddedEvent {
  export type InputTuple = [
    symbol: BytesLike,
    token: AddressLike,
    priceFeed: AddressLike,
    rateBps: BigNumberish
  ];
  export type OutputTuple = [
    symbol: string,
    token: string,
    priceFeed: string,
    rateBps: bigint
  ];
  export interface OutputObject {
    symbol: string;
    token: string;
    priceFeed: string;
    rateBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUpdatedEvent {
  export type InputTuple = [
    symbol: BytesLike,
    priceFeed: AddressLike,
    rateBps: BigNumberish
  ];
  export type OutputTuple = [
    symbol: string,
    priceFeed: string,
    rateBps: bigint
  ];
  export interface OutputObject {
    symbol: string;
    priceFeed: string;
    rateBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    lender: AddressLike,
    symbol: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lender: string, symbol: string, amount: bigint];
  export interface OutputObject {
    lender: string;
    symbol: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_DENOM: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  LIQUIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  addReserve: TypedContractMethod<
    [
      symbol: BytesLike,
      tokenAddr: AddressLike,
      priceFeedAddr: AddressLike,
      interestRateBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      symbol: BytesLike,
      amount: BigNumberish,
      maxPriceSlippageBps: BigNumberish,
      expectedEthUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  collateralETH: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  collateralRatioBps: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [symbol: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<[], [void], "payable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lenderBalances: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  liquidate: TypedContractMethod<[borrower: AddressLike], [void], "nonpayable">;

  loans: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        borrower: string;
        symbol: string;
        principal: bigint;
        collateral: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<[], [void], "nonpayable">;

  reserves: TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, string, string, bigint, bigint] & {
        enabled: boolean;
        token: string;
        priceFeed: string;
        interestRateBps: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralRatio: TypedContractMethod<
    [newRatioBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenToSymbol: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  updateReserve: TypedContractMethod<
    [
      symbol: BytesLike,
      priceFeedAddr: AddressLike,
      interestRateBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [symbol: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_DENOM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addReserve"
  ): TypedContractMethod<
    [
      symbol: BytesLike,
      tokenAddr: AddressLike,
      priceFeedAddr: AddressLike,
      interestRateBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      symbol: BytesLike,
      amount: BigNumberish,
      maxPriceSlippageBps: BigNumberish,
      expectedEthUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralETH"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralRatioBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [symbol: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lenderBalances"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[borrower: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        borrower: string;
        symbol: string;
        principal: bigint;
        collateral: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserves"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, string, string, bigint, bigint] & {
        enabled: boolean;
        token: string;
        priceFeed: string;
        interestRateBps: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralRatio"
  ): TypedContractMethod<[newRatioBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenToSymbol"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateReserve"
  ): TypedContractMethod<
    [
      symbol: BytesLike,
      priceFeedAddr: AddressLike,
      interestRateBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [symbol: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRatioUpdated"
  ): TypedContractEvent<
    CollateralRatioUpdatedEvent.InputTuple,
    CollateralRatioUpdatedEvent.OutputTuple,
    CollateralRatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "ReserveAdded"
  ): TypedContractEvent<
    ReserveAddedEvent.InputTuple,
    ReserveAddedEvent.OutputTuple,
    ReserveAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUpdated"
  ): TypedContractEvent<
    ReserveUpdatedEvent.InputTuple,
    ReserveUpdatedEvent.OutputTuple,
    ReserveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Borrowed(address,bytes32,uint256,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "CollateralDeposited(address,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralRatioUpdated(uint256)": TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;
    CollateralRatioUpdated: TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;

    "Deposited(address,bytes32,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Liquidated(address,address,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "Repaid(address,bytes32,uint256,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "ReserveAdded(bytes32,address,address,uint256)": TypedContractEvent<
      ReserveAddedEvent.InputTuple,
      ReserveAddedEvent.OutputTuple,
      ReserveAddedEvent.OutputObject
    >;
    ReserveAdded: TypedContractEvent<
      ReserveAddedEvent.InputTuple,
      ReserveAddedEvent.OutputTuple,
      ReserveAddedEvent.OutputObject
    >;

    "ReserveUpdated(bytes32,address,uint256)": TypedContractEvent<
      ReserveUpdatedEvent.InputTuple,
      ReserveUpdatedEvent.OutputTuple,
      ReserveUpdatedEvent.OutputObject
    >;
    ReserveUpdated: TypedContractEvent<
      ReserveUpdatedEvent.InputTuple,
      ReserveUpdatedEvent.OutputTuple,
      ReserveUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Withdrawn(address,bytes32,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
