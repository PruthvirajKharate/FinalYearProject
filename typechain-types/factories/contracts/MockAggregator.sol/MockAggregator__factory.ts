/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockAggregator,
  MockAggregatorInterface,
} from "../../../contracts/MockAggregator.sol/MockAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newAnswer",
        type: "int256",
      },
    ],
    name: "setAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106a13803806106a1833981810160405281019061003291906100fc565b81600160006101000a81548160ff021916908360ff1602179055508060008190555060018060016101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550505061013c565b600080fd5b600060ff82169050919050565b6100a38161008d565b81146100ae57600080fd5b50565b6000815190506100c08161009a565b92915050565b6000819050919050565b6100d9816100c6565b81146100e457600080fd5b50565b6000815190506100f6816100d0565b92915050565b6000806040838503121561011357610112610088565b5b6000610121858286016100b1565b9250506020610132858286016100e7565b9150509250929050565b6105568061014b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063313ce5671461006757806354fd4d50146100855780637284e416146100a357806399213cd8146100c15780639a6fc8f5146100dd578063feaf968c14610111575b600080fd5b61006f610133565b60405161007c9190610276565b60405180910390f35b61008d61014a565b60405161009a91906102aa565b60405180910390f35b6100ab610153565b6040516100b89190610355565b60405180910390f35b6100db60048036038101906100d691906103b2565b610190565b005b6100f760048036038101906100f29190610421565b6101ec565b60405161010895949392919061046c565b60405180910390f35b61011961020e565b60405161012a95949392919061046c565b60405180910390f35b6000600160009054906101000a900460ff16905090565b60006001905090565b60606040518060400160405280600f81526020017f4d6f636b2041676772656761746f720000000000000000000000000000000000815250905090565b8060008190555060018081819054906101000a900469ffffffffffffffffffff16809291906101be906104ee565b91906101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055505050565b6000806000806000856000544242899450945094509450945091939590929450565b600080600080600060018054906101000a900469ffffffffffffffffffff16600054424260018054906101000a900469ffffffffffffffffffff16945094509450945094509091929394565b600060ff82169050919050565b6102708161025a565b82525050565b600060208201905061028b6000830184610267565b92915050565b6000819050919050565b6102a481610291565b82525050565b60006020820190506102bf600083018461029b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102ff5780820151818401526020810190506102e4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610327826102c5565b61033181856102d0565b93506103418185602086016102e1565b61034a8161030b565b840191505092915050565b6000602082019050818103600083015261036f818461031c565b905092915050565b600080fd5b6000819050919050565b61038f8161037c565b811461039a57600080fd5b50565b6000813590506103ac81610386565b92915050565b6000602082840312156103c8576103c7610377565b5b60006103d68482850161039d565b91505092915050565b600069ffffffffffffffffffff82169050919050565b6103fe816103df565b811461040957600080fd5b50565b60008135905061041b816103f5565b92915050565b60006020828403121561043757610436610377565b5b60006104458482850161040c565b91505092915050565b610457816103df565b82525050565b6104668161037c565b82525050565b600060a082019050610481600083018861044e565b61048e602083018761045d565b61049b604083018661029b565b6104a8606083018561029b565b6104b5608083018461044e565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104f9826103df565b915069ffffffffffffffffffff8203610515576105146104bf565b5b60018201905091905056fea264697066735822122010923f267be15063fbf5411506c634b027bd741dcfa5edd03585e6bf174c509464736f6c63430008140033";

type MockAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregator__factory extends ContractFactory {
  constructor(...args: MockAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      decimals_,
      initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(decimals_, initialAnswer, overrides || {}) as Promise<
      MockAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAggregator__factory {
    return super.connect(runner) as MockAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregatorInterface {
    return new Interface(_abi) as MockAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAggregator {
    return new Contract(address, _abi, runner) as unknown as MockAggregator;
  }
}
